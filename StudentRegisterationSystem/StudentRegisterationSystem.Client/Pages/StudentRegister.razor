@page "/student/register-courses"
@using Shared.DTOs.Courses
@using Shared.DTOs.Registeration
@inject HttpClient Http
@inject IJSRuntime JS

<div class="container my-4">

    <!-- Header -->
    <div class="row mb-4">
        <div class="col-md-12">
            <h2 class="mb-3">
                <i class="bi bi-journal-bookmark"></i> Course Registration
            </h2>
            <p class="text-muted">Select courses to register for the current semester</p>
        </div>
    </div>

    <!-- Message -->
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @(isError ? "alert-danger" : "alert-success") alert-dismissible fade show">
            @message
            <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
        </div>
    }

    <!-- Loading -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-2">Loading available courses...</p>
        </div>
    }
    else
    {
        <!-- No active registration -->
        @if (activeRegistrationPeriod == null)
        {
            <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle"></i>
                <strong>No Active Registration Period</strong>
                <p class="mb-0">There is currently no active registration period. Please check back later.</p>
            </div>
        }
        else
        {
            <!-- Active registration period info -->
            <div class="card mb-4 border-info">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="bi bi-calendar-check"></i> Active Registration Period</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4"><strong>Semester:</strong> @activeRegistrationPeriod.SemesterName</div>
                        <div class="col-md-4"><strong>Start Date:</strong> @activeRegistrationPeriod.StartDate.ToShortDateString()</div>
                        <div class="col-md-4"><strong>End Date:</strong> @activeRegistrationPeriod.EndDate.ToShortDateString()</div>
                    </div>
                </div>
            </div>

            <!-- Available courses -->
            @if (availableCourses?.Any() == true)
            {
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Available Courses (@availableCourses.Count)</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var course in availableCourses)
                            {
                                <div class="col-md-6 col-lg-4 mb-3">
                                    <div class="card h-100 shadow-sm @(selectedCourses.Contains(course.id) ? "border-success" : "")">
                                        <div class="card-body">
                                            <h6 class="card-title text-primary">
                                                @course.CourseName
                                                @if (!string.IsNullOrEmpty(course.CourseCode))
                                                {
                                                    <span class="badge bg-secondary ms-2">@course.CourseCode</span>
                                                }
                                            </h6>
                                            <small class="text-muted d-block mb-1"><i class="bi bi-building"></i> @course.DepartmentName</small>
                                            <span class="badge bg-info"><i class="bi bi-clock"></i> @course.CreditHours Credit Hours</span>

                                            @if (course.DoctorsNames?.Any() == true)
                                            {
                                                <div class="mt-2">
                                                    <small class="text-muted d-block mb-1"><i class="bi bi-person"></i> Instructors:</small>
                                                    @foreach (var doctor in course.DoctorsNames)
                                                    {
                                                        <span class="badge bg-light text-dark me-1">@doctor</span>
                                                    }
                                                </div>
                                            }
                                        </div>

                                        <div class="card-footer bg-white">
                                            @if (selectedCourses.Contains(course.id))
                                            {
                                                <button class="btn btn-outline-danger btn-sm w-100" @onclick="() => DeselectCourse(course.id)">
                                                    <i class="bi bi-dash-circle"></i> Remove
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-success btn-sm w-100" @onclick="() => SelectCourse(course.id)">
                                                    <i class="bi bi-plus-circle"></i> Select Course
                                                </button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> <strong>No Available Courses</strong>
                    <p class="mb-0">You have either registered for all available courses or there are no courses available in your department.</p>
                </div>
            }

            <!-- Selected courses summary -->
            @if (selectedCourses.Any())
            {
                <div class="card mt-4 border-success">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0"><i class="bi bi-cart-check"></i> Selected Courses (@selectedCourses.Count)</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            @foreach (var courseId in selectedCourses)
                            {
                                var course = availableCourses.FirstOrDefault(c => c.id == courseId);
                                if (course != null)
                                {
                                    <div class="col-md-6 mb-2">
                                        <div class="d-flex justify-content-between align-items-center bg-light p-2 rounded">
                                            <span><strong>@course.CourseName</strong> <small class="text-muted">(@course.CreditHours hrs)</small></span>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeselectCourse(courseId)"><i class="bi bi-x"></i></button>
                                        </div>
                                    </div>
                                }
                            }
                        </div>

                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>Total Credit Hours:</strong>
                                <span class="badge bg-primary fs-6">@totalCreditHours</span>
                            </div>

                            <div>
                                <button class="btn btn-secondary me-2" @onclick="ClearSelection"><i class="bi bi-x-circle"></i> Clear All</button>
                                <button class="btn btn-success" @onclick="RegisterSelectedCourses" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="bi bi-check-circle"></i> Register Courses
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (registeredCourses.Any())
            {
                <div class="card mt-4 border-warning">
                    <div class="card-header bg-warning text-white">
                        <h5 class="mb-0"><i class="bi bi-bookmark-check"></i> Registered Courses This Semester (@registeredCourses.Count)</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var course in registeredCourses)
                            {
                                <div class="col-md-6 mb-2">
                                    <div class="d-flex justify-content-between align-items-center bg-light p-2 rounded">
                                        <span><strong>@course.CourseName</strong> <small class="text-muted">(@course.CreditHours hrs)</small></span>
                                        <span class="badge bg-success">@course.Status</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    private List<CourseDto> availableCourses = new();
    private RegisterationPeriodDto activeRegistrationPeriod;
    private List<Guid> selectedCourses = new();
    private string message = string.Empty;
    private bool isError = false;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private List<RegisteredCourseDto> registeredCourses = new();

    private int totalCreditHours => selectedCourses.Sum(id => availableCourses.FirstOrDefault(c => c.id == id)?.CreditHours ?? 0);

    // Wrapper for API response
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public T Data { get; set; }
        public string Message { get; set; }
    }

    protected override async Task OnInitializedAsync() => await LoadData();

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            await Task.WhenAll(LoadAvailableCourses(), LoadActiveRegistrationPeriod(), LoadRegisteredCourses());
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task LoadRegisteredCourses()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetFromJsonAsync<ApiResponse<List<RegisteredCourseDto>>>("api/Course/RegisteredCourses");
            registeredCourses = response?.Data ?? new List<RegisteredCourseDto>();
        }
        catch
        {
            registeredCourses = new List<RegisteredCourseDto>();
        }
    }

    private async Task LoadAvailableCourses()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<List<CourseDto>>>("api/Course/AvailableCourses");
            availableCourses = response?.Data ?? new List<CourseDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
            availableCourses = new List<CourseDto>();
        }
    }

    private async Task LoadActiveRegistrationPeriod()
    {
        try
        {
            activeRegistrationPeriod = await Http.GetFromJsonAsync<RegisterationPeriodDto>("api/RegisterationMangement/GetActive");
        }
        catch
        {
            activeRegistrationPeriod = null;
        }
    }

    private void SelectCourse(Guid courseId)
    {
        if (!selectedCourses.Contains(courseId))
            selectedCourses.Add(courseId);
    }

    private void DeselectCourse(Guid courseId) => selectedCourses.Remove(courseId);

    private void ClearSelection() => selectedCourses.Clear();

    private async Task RegisterSelectedCourses()
    {
        if (!selectedCourses.Any())
        {
            message = "Please select at least one course to register.";
            isError = true;
            return;
        }

        if (activeRegistrationPeriod == null)
        {
            message = "No active registration period found.";
            isError = true;
            return;
        }

        isSubmitting = true;
        message = string.Empty;

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            int successCount = 0, failCount = 0;

            foreach (var courseId in selectedCourses.ToList())
            {
                var registerDto = new RegisterCourseDto
                {
                    CourseId = courseId,
                    RegisterationPeriodId = activeRegistrationPeriod.Id
                };

                try
                {
                    var response = await Http.PostAsJsonAsync("api/Course/RegisterCourse", registerDto);
                    if (response.IsSuccessStatusCode)
                    {
                        successCount++;
                        selectedCourses.Remove(courseId);
                    }
                    else failCount++;
                }
                catch
                {
                    failCount++;
                }
            }

            if (successCount > 0)
            {
                message = $"Successfully registered {successCount} course(s).";
                isError = false;
                await LoadAvailableCourses();
            }

            if (failCount > 0)
                message += $" Failed to register {failCount} course(s).";
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isError = true;
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
